{"version":3,"sources":["components/Card/Card.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","props","handleClick","setState","prevState","flipCard","buttonText","state","questionIndex","q1","this","questions","question","a1","answer","visibleSide","Fragment","style","paddingBottom","textAlign","alignItems","border","padding","borderRadius","backgroundColor","boxShadow","minWidth","minHeight","height","width","marginTop","onClick","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAEqBA,E,kDACpB,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAOPC,YAAc,WACb,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC7BC,UAAWD,EAAUC,SACrBC,WAAY,EAAKC,MAAMF,SAAW,aAAe,YACjDG,cAAe,EAAKD,MAAMF,SAAW,EAAKE,MAAMC,cAAgB,EAAI,EAAKD,MAAMC,mBAVhF,EAAKD,MAAQ,CACZF,UAAU,EACVG,cAAe,EACfF,WAAY,cALK,E,qDAiBlB,IAmBIG,EAAKC,KAAKT,MAAMU,UAAUD,KAAKH,MAAMC,eAAeI,SACpDC,EAAKH,KAAKT,MAAMU,UAAUD,KAAKH,MAAMC,eAAeM,OACpDC,EAAc,KAalB,OAXCA,EADGL,KAAKH,MAAMF,SAEb,kBAAC,IAAMW,SAAP,KACE,IACD,uCAAaH,GACb,yCAAeJ,GACf,6BAAO,KAIK,4BAAKA,GAGnB,kBAAC,IAAMO,SAAP,KACC,yBAAKC,MAAO,CAAEC,cAAe,OAAQC,UAAW,SAAUC,WAAY,WACrE,yBAAKH,MArCW,CAClBI,OAAQ,sBACRC,QAAS,OACTC,aAAc,OACdC,gBAAiB,aACjBC,UAAW,sBACXC,SAAU,QACVC,UAAW,UA+BPZ,GAEF,4BAAQE,MA9BU,CACpBI,OAAQ,4BACRG,gBAAiB,qBACjBI,OAAQ,OACRC,MAAO,QACPN,aAAc,OACdO,UAAW,QAwBoBC,QAASrB,KAAKR,aACzCQ,KAAKH,MAAMD,kB,GA3DgB0B,aCE9BrB,G,MAAY,CACd,CACEC,SAAU,+BACVE,OAAQ,WAEV,CACEF,SAAU,gCACVE,OAAQ,OAEV,CACEF,SAAU,6BACVE,OAAQ,QAEV,CACEF,SAAU,gCACVE,OAAQ,UAEV,CACEF,SAAU,kCACVE,OAAQ,OAEV,CACEF,SAAU,iCACVE,OAAQ,QAEV,CACEF,SAAU,iCACVE,OAAQ,OAEV,CACEF,SAAU,6BACVE,OAAQ,QAEV,CACEF,SAAU,gCACVE,OAAQ,UAEV,CACEF,SAAU,mCACVE,OAAQ,SAEV,CACEF,SAAU,oCACVE,OAAQ,SAEV,CACEF,SAAU,qCACVE,OAAQ,UAEV,CACEF,SAAU,iCACVE,OAAQ,SAEV,CACEF,SAAU,gCACVE,OAAQ,SAEV,CACEF,SAAU,gCACVE,OAAQ,SAmBGmB,MAff,WACE,OACE,kBAAC,IAAMjB,SAAP,KACE,wBAAIkB,UAAU,YAAW,qDACzB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,CACEvB,UAAWA,QC9DHwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1848db90.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Card extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tflipCard: false,\n\t\t\tquestionIndex: 0,\n\t\t\tbuttonText: 'See Answer'\n\t\t};\n\t}\n\thandleClick = () => {\n\t\tthis.setState((prevState) => ({\n\t\t\tflipCard: !prevState.flipCard,\n\t\t\tbuttonText: this.state.flipCard ? 'See Answer' : 'Next Card',\n\t\t\tquestionIndex: this.state.flipCard ? this.state.questionIndex + 1 : this.state.questionIndex\n\t\t}));\n\t};\n\n\trender() {\n\t\tconst cardStyles = {\n\t\t\tborder: '1px solid lightblue',\n\t\t\tpadding: '30px',\n\t\t\tborderRadius: '20px',\n\t\t\tbackgroundColor: 'powderblue',\n\t\t\tboxShadow: '2px 2px 5px #0066AA',\n\t\t\tminWidth: '500px',\n\t\t\tminHeight: '175px'\n\t\t};\n\n\t\tconst buttonStyles = {\n\t\t\tborder: '2px solid rgb(0, 95, 139)',\n\t\t\tbackgroundColor: 'rgb(135, 217, 250)',\n\t\t\theight: '50px',\n\t\t\twidth: '150px',\n\t\t\tborderRadius: '10px',\n\t\t\tmarginTop: '10px'\n\t\t};\n\n\t\tlet q1 = this.props.questions[this.state.questionIndex].question;\n\t\tlet a1 = this.props.questions[this.state.questionIndex].answer;\n\t\tlet visibleSide = null;\n\t\tif (this.state.flipCard) {\n\t\t\tvisibleSide = (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t{' '}\n\t\t\t\t\t<h1>Answer: {a1}</h1>\n\t\t\t\t\t<h3>Question: {q1}</h3>\n\t\t\t\t\t<br />{' '}\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t} else {\n\t\t\tvisibleSide = <h1>{q1}</h1>;\n\t\t}\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div style={{ paddingBottom: '20px', textAlign: 'center', alignItems: 'center' }}>\n\t\t\t\t\t<div style={cardStyles}>\n\t\t\t\t\t\t{visibleSide}\n\t\t\t\t\t</div>\n\t\t\t\t\t<button style={buttonStyles} onClick={this.handleClick}>\n\t\t\t\t\t\t{this.state.buttonText}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport Card from './Card/Card'\nimport './App.css';\n\nlet questions = [\n  {\n    question: 'What sounds does a bat make?',\n    answer: 'screech'\n  },\n  {\n    question: 'What sounds does a crow make?',\n    answer: 'caw'\n  },\n  {\n    question: 'What sounds do geese make?',\n    answer: 'honk'\n  },\n  {\n    question: 'What sounds do peacocks make?',\n    answer: 'scream'\n  },\n  {\n    question: 'What sounds does a pigeon make?',\n    answer: 'coo'\n  },\n  {\n    question: 'What sounds does a quail make?',\n    answer: 'call'\n  },\n  {\n    question: 'What sounds does a raven make?',\n    answer: 'caw'\n  },\n  {\n    question: 'What sounds do seals make?',\n    answer: 'bark'\n  },\n  {\n    question: 'What sounds do vultures make?',\n    answer: 'scream'\n  },\n  {\n    question: 'What sounds does a sparrow make?',\n    answer: 'chirp'\n  },\n  {\n    question: 'What sounds does a starling make?',\n    answer: 'chirp'\n  },\n  {\n    question: 'What sounds does a goldfinch make?',\n    answer: 'warble'\n  },\n  {\n    question: 'What sounds does a crane make?',\n    answer: 'whoop'\n  },\n  {\n    question: 'What sounds does a lark make?',\n    answer: 'trill'\n  },\n  {\n    question: 'What sounds does a dove make?',\n    answer: 'coo'\n  }\n]\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <h1 className='apptitle'><center>Bird Sounds Quiz</center></h1>\n      <div className='appgrid'>\n        <div className='carddiv'>\n          <Card\n            questions={questions}\n          />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}